{"version":3,"sources":["components/Form.tsx","components/InputText.tsx","components/InputCheckbox.tsx","components/Select.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IndustryEnum","InputText","id","text","isRequired","register","htmlFor","aria-hidden","type","required","InputCheckbox","children","className","Select","options","value","label","hidden","element","Object","entries","key","push","renderOptions","operatingGeographyEnum","IndustryOptions","automotive","banking","consulting","finance","healthcare","mediaPR","retail","technology","telecommunication","other","operatingGeographyOptions","national","regional","global","validationSchema","yup","shape","firstName","trim","email","matches","company","industry","privacyPolicy","oneOf","Form","useForm","mode","resolver","yupResolver","watch","handleSubmit","isValid","formState","console","log","onSubmit","data","name","defaultValue","disabled","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03db945a.chunk.js","sourcesContent":["import { useForm, SubmitHandler } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport InputText from \"./InputText\";\nimport InputCheckbox from \"./InputCheckbox\";\nimport Select from \"./Select\";\n\nenum IndustryEnum {\n  automotive = \"automotive\",\n  banking = \"banking\",\n  consulting = \"consulting\",\n  finance = \"finance\",\n  healthcare = \"healthcare\",\n  mediaPR = \"mediaPR\",\n  retail = \"retail\",\n  technology = \"technology\",\n  telecommunication = \"telecommunication\",\n  other = \"other\",\n}\n\nconst IndustryOptions = {\n  [IndustryEnum.automotive]: \"Automotive\",\n  [IndustryEnum.banking]: \"Banking\",\n  [IndustryEnum.consulting]: \"Consulting\",\n  [IndustryEnum.finance]: \"Finance\",\n  [IndustryEnum.healthcare]: \"Healthcare\",\n  [IndustryEnum.mediaPR]: \"Media/PR\",\n  [IndustryEnum.retail]: \"Retail\",\n  [IndustryEnum.technology]: \"Technology\",\n  [IndustryEnum.telecommunication]: \"Telecommunication\",\n  [IndustryEnum.other]: \"Other\",\n};\n\nenum operatingGeographyEnum {\n  national = \"national\",\n  regional = \"regional\",\n  global = \"global\",\n}\n\nconst operatingGeographyOptions = {\n  [operatingGeographyEnum.national]: \"National\",\n  [operatingGeographyEnum.regional]: \"Regional\",\n  [operatingGeographyEnum.global]: \"Global\",\n};\n\ntype FormValues = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  jobTitle: string;\n  company: string;\n  industry: IndustryEnum;\n  country: string;\n  operatingGeography: operatingGeographyEnum;\n  comments: string;\n  privacyPolicy: boolean;\n  newsletter: boolean;\n};\n\nconst validationSchema = yup.object().shape({\n  firstName: yup.string().trim().required(),\n  email: yup\n    .string()\n    .trim()\n    .matches(/[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/gm)\n    .required(),\n  company: yup.string().trim().required(),\n  industry: yup.string().trim().required(),\n  // country: yup.string().trim().required(),\n  privacyPolicy: yup.boolean().oneOf([true]),\n});\n\nconst Form = () => {\n  const { register, watch, handleSubmit, formState } = useForm<FormValues>({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit: SubmitHandler<FormValues> = (data) => console.log(data);\n\n  const { isValid } = formState;\n\n  console.log(watch());\n\n  // console.log(IndustryOptions);\n\n  return (\n    <div className=\"contact-form\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"contact-form__block\">\n          <InputText\n            id={\"firstName\"}\n            text={\"First name\"}\n            isRequired={true}\n            register={register}\n          />\n          {/* {errors.firstName && <span>This field is required</span>} */}\n          <InputText\n            id={\"lastName\"}\n            text={\"Last name\"}\n            isRequired={false}\n            register={register}\n          />\n          <InputText\n            id={\"email\"}\n            text={\"Email\"}\n            isRequired={true}\n            register={register}\n          />\n          <InputText\n            id={\"jobTitle\"}\n            text={\"Job title\"}\n            isRequired={false}\n            register={register}\n          />\n        </div>\n\n        <div className=\"contact-form__block\">\n          <InputText\n            id={\"company\"}\n            text={\"Company\"}\n            isRequired={true}\n            register={register}\n          />\n          <Select\n            id={\"industry\"}\n            text={\"Industry\"}\n            isRequired={true}\n            register={register}\n            options={IndustryOptions}\n          />\n\n          <div>\n            <label htmlFor=\"country\">Country*</label>\n            <select name=\"country\" id=\"country\" required defaultValue=\"N/A\">\n              <option value=\"N/A\" disabled hidden>\n                N/A\n              </option>\n              <option value=\"estonia\">Estonia</option>\n              <option value=\"russia\">Russia</option>\n              <option value=\"france\">France</option>\n            </select>\n          </div>\n\n          <Select\n            id={\"operatingGeography\"}\n            text={\"Operating geography\"}\n            isRequired={false}\n            register={register}\n            options={operatingGeographyOptions}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"comments\">What would you like to talk about?</label>\n          <textarea name=\"comments\" id=\"comments\"></textarea>\n        </div>\n\n        <div className=\"contact-form__block\">\n          <div className=\"checkboxes\">\n            <InputCheckbox\n              id={\"privacyPolicy\"}\n              isRequired={true}\n              register={register}\n            >\n              By submitting this form I accept{\" \"}\n              <a href=\"https://www.modularbank.co/privacy-policy/\">\n                privacy policy and cookie policy\n              </a>\n              .\n            </InputCheckbox>\n\n            <InputCheckbox\n              id={\"newsletter\"}\n              isRequired={false}\n              register={register}\n            >\n              I would like to receive your newsletter.\n            </InputCheckbox>\n          </div>\n\n          <div className=\"contact-form__submit-button-wrapper\">\n            <button\n              className=\"contact-form__submit-button\"\n              type=\"submit\"\n              disabled={!isValid}\n            >\n              Send\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","type InputTextProps = {\n  id: string;\n  text: string;\n  isRequired: boolean;\n  register: any;\n};\n\nconst InputText = ({ id, text, isRequired, register }: InputTextProps) => {\n  const renderAsterisk = () => {\n    return isRequired && <span aria-hidden=\"true\">*</span>;\n  };\n\n  return (\n    <div>\n      <label htmlFor={id}>\n        {text}\n        {renderAsterisk()}\n      </label>\n      <input type=\"text\" {...register(id)} id={id} required={isRequired} />\n    </div>\n  );\n};\n\nexport default InputText;\n","type InputCheckboxProps = {\n  id: string;\n  isRequired: boolean;\n  register: any;\n  children: any;\n};\n\nconst InputCheckbox = ({\n  id,\n  children,\n  isRequired,\n  register,\n}: InputCheckboxProps) => {\n  return (\n    <div className=\"checkboxes__div\">\n      <input type=\"checkbox\" {...register(id)} id={id} required={isRequired} />\n      <label htmlFor={id}>{children}</label>\n    </div>\n  );\n};\n\nexport default InputCheckbox;\n","type SelectProps = {\n  id: string;\n  text: string;\n  isRequired: boolean;\n  register: any;\n  options: object;\n};\n\nconst Select = ({ id, text, isRequired, register, options }: SelectProps) => {\n  const renderAsterisk = () => {\n    return isRequired && <span aria-hidden=\"true\">*</span>;\n  };\n\n  const renderOptions = () => {\n    let element = [];\n\n    for (const [key, value] of Object.entries(options)) {\n      element.push(\n        <option className=\"option\" value={key} key={key}>\n          {value}\n        </option>\n      );\n    }\n\n    return element;\n  };\n\n  return (\n    <div>\n      <label htmlFor={id}>\n        {text}\n        {renderAsterisk()}\n      </label>\n      <select {...register(id)} id={id} required={isRequired}>\n        <option value=\"\" label=\"N/A\" hidden />\n        {renderOptions()}\n      </select>\n    </div>\n  );\n};\n\nexport default Select;\n","import Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"contact-title\">Contact us</h1>\n\n      <div className=\"contact-info\">\n        <div className=\"contact-info__paragraph\">\n          <p>Media enquiries:</p>\n          <a href=\"mailto:press@modularbank.co\">press@modularbank.co</a>\n        </div>\n\n        <div className=\"contact-info__paragraph\">\n          <p>Career questions:</p>\n          <a href=\"mailto:careers@modularbank.co\">careers@modularbank.co</a>\n        </div>\n\n        <div className=\"contact-info__paragraph\">\n          <p>Our offices:</p>\n          <p>Tallinn, Estonia</p>\n          <p>Vabaduse Workland</p>\n          <p>Pärnu mnt 12, 10146</p>\n        </div>\n\n        <div className=\"contact-info__paragraph\">\n          <p>Berlin, Germany</p>\n          <p>Bikini Berlin, Scaling Spaces, 2.OG</p>\n          <p>Budapester Str. 46</p>\n          <p>10787 Berlin</p>\n        </div>\n      </div>\n\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/main.scss\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}