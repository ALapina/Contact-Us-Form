{"version":3,"sources":["selectOptions.ts","utils.tsx","components/InputText.tsx","components/InputCheckbox.tsx","components/Select.tsx","components/SelectCountry.tsx","components/Form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IndustryEnum","renderAsterisk","isRequired","aria-hidden","renderCountryFlag","name","flag","className","style","width","paddingRight","alt","src","InputText","id","register","children","htmlFor","type","required","InputCheckbox","renderOptions","options","element","Object","entries","key","value","push","Select","label","hidden","DropdownIndicator","props","color","size","SelectCountry","control","isLoading","optionValue","formatOptionLabel","render","field","classNamePrefix","components","aria-labelledby","getOptionValue","option","operatingGeographyEnum","IndustryOptions","automotive","banking","consulting","finance","healthcare","mediaPR","retail","technology","telecommunication","other","operatingGeographyOptions","national","regional","global","formDefaultValues","firstName","lastName","email","jobTitle","company","industry","operatingGeography","comments","privacyPolicy","newsletter","country","validationSchema","yup","shape","trim","matches","oneOf","Form","useState","setLoading","countries","setCountries","useForm","mode","resolver","yupResolver","defaultValues","handleSubmit","reset","formState","a","fetch","response","json","useEffect","loadCountries","isSubmitSuccessful","onSubmit","data","alpha3Code","console","log","href","disabled","isValid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07c51a74.chunk.js","sourcesContent":["export enum IndustryEnum {\n  automotive = \"automotive\",\n  banking = \"banking\",\n  consulting = \"consulting\",\n  finance = \"finance\",\n  healthcare = \"healthcare\",\n  mediaPR = \"mediaPR\",\n  retail = \"retail\",\n  technology = \"technology\",\n  telecommunication = \"telecommunication\",\n  other = \"other\",\n}\n\nexport const IndustryOptions = {\n  [IndustryEnum.automotive]: \"Automotive\",\n  [IndustryEnum.banking]: \"Banking\",\n  [IndustryEnum.consulting]: \"Consulting\",\n  [IndustryEnum.finance]: \"Finance\",\n  [IndustryEnum.healthcare]: \"Healthcare\",\n  [IndustryEnum.mediaPR]: \"Media/PR\",\n  [IndustryEnum.retail]: \"Retail\",\n  [IndustryEnum.technology]: \"Technology\",\n  [IndustryEnum.telecommunication]: \"Telecommunication\",\n  [IndustryEnum.other]: \"Other\",\n};\n\nexport enum operatingGeographyEnum {\n  national = \"national\",\n  regional = \"regional\",\n  global = \"global\",\n}\n\nexport const operatingGeographyOptions = {\n  [operatingGeographyEnum.national]: \"National\",\n  [operatingGeographyEnum.regional]: \"Regional\",\n  [operatingGeographyEnum.global]: \"Global\",\n};\n","export const renderAsterisk = (isRequired: boolean) => {\n  return isRequired && <span aria-hidden=\"true\">*</span>;\n};\n\ntype renderCountryFlagProps = {\n  name: string;\n  flag: string;\n};\n\nexport const renderCountryFlag = ({ name, flag }: renderCountryFlagProps) => (\n  <div>\n    <img\n      className=\"country-flag\"\n      style={{ width: \"20px\", paddingRight: \"4px\" }}\n      alt=\"country flag\"\n      src={flag}\n    />\n    <span>{name}</span>\n  </div>\n);\n","import { renderAsterisk } from \"../utils\";\n\ntype InputTextProps = {\n  id: string;\n  isRequired: boolean;\n  register: Function;\n  children: React.ReactNode;\n};\n\nconst InputText = ({ id, isRequired, register, children }: InputTextProps) => {\n  return (\n    <div>\n      <label htmlFor={id}>\n        {children}\n        {renderAsterisk(isRequired)}\n      </label>\n      <input\n        className=\"contact-form__input\"\n        type=\"text\"\n        id={id}\n        required={isRequired}\n        {...register(id)}\n      />\n    </div>\n  );\n};\n\nexport default InputText;\n","type InputCheckboxProps = {\n  id: string;\n  isRequired: boolean;\n  register: any;\n  children: React.ReactNode;\n};\n\nconst InputCheckbox = ({\n  id,\n  children,\n  isRequired,\n  register,\n}: InputCheckboxProps) => {\n  return (\n    <div className=\"contact-form__checkbox\">\n      <input type=\"checkbox\" {...register(id)} id={id} required={isRequired} />\n      <label htmlFor={id}>{children}</label>\n    </div>\n  );\n};\n\nexport default InputCheckbox;\n","import { renderAsterisk } from \"../utils\";\n\ntype SelectProps = {\n  id: string;\n  isRequired: boolean;\n  register: Function;\n  options: object;\n  children: React.ReactNode;\n};\n\nconst renderOptions = (options: object) => {\n  let element = [];\n  for (const [key, value] of Object.entries(options)) {\n    element.push(\n      <option value={key} key={key}>\n        {value}\n      </option>\n    );\n  }\n  return element;\n};\n\nconst Select = ({\n  id,\n  children,\n  isRequired,\n  register,\n  options,\n}: SelectProps) => {\n  return (\n    <div>\n      <label htmlFor={id}>\n        {children}\n        {renderAsterisk(isRequired)}\n      </label>\n      <select\n        className=\"contact-form__select\"\n        id={id}\n        required={isRequired}\n        {...register(id)}>\n        <option value=\"\" label=\"N/A\" hidden />\n        {renderOptions(options)}\n      </select>\n    </div>\n  );\n};\n\nexport default Select;\n","import ReactSelect, { components } from \"react-select\";\nimport { Controller } from \"react-hook-form\";\nimport { renderAsterisk } from \"../utils\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\n\ntype SelectCountryProps = {\n  control: any;\n  id: string;\n  children: React.ReactNode;\n  isLoading: boolean;\n  options: Array<object>;\n  optionValue: string;\n  isRequired: boolean;\n  formatOptionLabel: any;\n};\n\nconst DropdownIndicator = (props: any) => {\n  return (\n    <components.DropdownIndicator {...props}>\n      <AiFillCaretDown color={\"#000000\"} size={\"14px\"} />\n    </components.DropdownIndicator>\n  );\n};\n\nconst SelectCountry = ({\n  control,\n  id,\n  children,\n  isLoading,\n  options,\n  optionValue,\n  isRequired,\n  formatOptionLabel,\n}: SelectCountryProps) => {\n  return (\n    <div>\n      <label id={id}>\n        {children}\n        {renderAsterisk(isRequired)}\n      </label>\n      <Controller\n        name={id}\n        control={control}\n        render={({ field }) => (\n          <ReactSelect\n            {...field}\n            classNamePrefix=\"react-select\"\n            components={{ DropdownIndicator }}\n            aria-labelledby={id}\n            isRequired={isRequired}\n            isLoading={isLoading}\n            options={options}\n            getOptionValue={(option) => option[optionValue]}\n            formatOptionLabel={formatOptionLabel}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default SelectCountry;\n","import { useState, useEffect } from \"react\";\n\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport InputText from \"./InputText\";\nimport InputCheckbox from \"./InputCheckbox\";\nimport Select from \"./Select\";\nimport SelectCountry from \"./SelectCountry\";\n\nimport {\n  IndustryEnum,\n  IndustryOptions,\n  operatingGeographyEnum,\n  operatingGeographyOptions,\n} from \"../selectOptions\";\n\nimport { renderCountryFlag } from \"../utils\";\n\ntype countriesType = { name: string; flag: string; alpha3Code: string };\n\ntype FormValues = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  jobTitle: string;\n  company: string;\n  industry: IndustryEnum | string;\n  operatingGeography: operatingGeographyEnum | string;\n  comments: string;\n  privacyPolicy: boolean;\n  newsletter: boolean;\n  country: countriesType | any;\n};\n\nconst formDefaultValues = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  jobTitle: \"\",\n  company: \"\",\n  industry: \"\",\n  operatingGeography: \"\",\n  comments: \"\",\n  privacyPolicy: false,\n  newsletter: false,\n  country: \"\",\n};\n\nconst validationSchema = yup.object().shape({\n  firstName: yup.string().trim().required(),\n  email: yup\n    .string()\n    .trim()\n    .matches(/[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/gm)\n    .required(),\n  company: yup.string().trim().required(),\n  industry: yup.string().trim().required(),\n  country: yup.object().required(),\n  privacyPolicy: yup.boolean().oneOf([true]),\n});\n\nconst Form = () => {\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [countries, setCountries] = useState<Array<countriesType>>([]);\n  const { register, handleSubmit, reset, control, formState } =\n    useForm<FormValues>({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema),\n      defaultValues: formDefaultValues,\n    });\n\n  async function loadCountries() {\n    setLoading(true);\n    const response = await fetch(\n      \"https://restcountries.eu/rest/v2/all?fields=name;alpha3Code;flag\"\n    );\n    const countries = await response.json();\n    setCountries(countries);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    loadCountries();\n  }, []);\n\n  useEffect(() => {\n    if (formState.isSubmitSuccessful) {\n      reset();\n    }\n  }, [formState, reset]);\n\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\n    data.country = data.country.alpha3Code;\n    console.log(data);\n  };\n\n  // console.log(watch());\n\n  return (\n    <div className=\"contact-form\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"contact-form__form-block\">\n          <InputText id={\"firstName\"} isRequired={true} register={register}>\n            First name\n          </InputText>\n          <InputText id={\"lastName\"} isRequired={false} register={register}>\n            Last name\n          </InputText>\n          <InputText id={\"email\"} isRequired={true} register={register}>\n            Email\n          </InputText>\n          <InputText id={\"jobTitle\"} isRequired={false} register={register}>\n            Job title\n          </InputText>\n        </div>\n\n        <div className=\"contact-form__form-block\">\n          <InputText id={\"company\"} isRequired={true} register={register}>\n            Company\n          </InputText>\n          <Select\n            id={\"industry\"}\n            isRequired={true}\n            register={register}\n            options={IndustryOptions}>\n            Industry\n          </Select>\n\n          <SelectCountry\n            id=\"country\"\n            control={control}\n            isLoading={isLoading}\n            options={countries}\n            optionValue={\"alpha3Code\"}\n            isRequired={true}\n            formatOptionLabel={renderCountryFlag}>\n            Country\n          </SelectCountry>\n\n          <Select\n            id={\"operatingGeography\"}\n            isRequired={false}\n            register={register}\n            options={operatingGeographyOptions}>\n            Operating geography\n          </Select>\n        </div>\n\n        <div>\n          <label htmlFor=\"comments\">What would you like to talk about?</label>\n          <textarea\n            className=\"contact-form__textarea\"\n            name=\"comments\"\n            id=\"comments\"></textarea>\n        </div>\n\n        <div className=\"contact-form__form-block\">\n          <div>\n            <InputCheckbox\n              id={\"privacyPolicy\"}\n              isRequired={true}\n              register={register}>\n              By submitting this form I accept{\" \"}\n              <a href=\"https://www.modularbank.co/privacy-policy/\">\n                privacy policy and cookie policy\n              </a>\n              .\n            </InputCheckbox>\n\n            <InputCheckbox\n              id={\"newsletter\"}\n              isRequired={false}\n              register={register}>\n              I would like to receive your newsletter.\n            </InputCheckbox>\n          </div>\n\n          <button\n            className=\"contact-form__submit-button\"\n            type=\"submit\"\n            disabled={!formState.isValid}>\n            Send\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"contact-title\">Contact us</h1>\n\n      <div className=\"contact-info\">\n        <div className=\"contact-info__paragraph\">\n          <p>Media enquiries:</p>\n          <a href=\"mailto:press@modularbank.co\">press@modularbank.co</a>\n        </div>\n\n        <div className=\"contact-info__paragraph\">\n          <p>Career questions:</p>\n          <a href=\"mailto:careers@modularbank.co\">careers@modularbank.co</a>\n        </div>\n\n        <div className=\"contact-info__paragraph\">\n          <p>Our offices:</p>\n          <p>Tallinn, Estonia</p>\n          <p>Vabaduse Workland</p>\n          <p>Pärnu mnt 12, 10146</p>\n        </div>\n\n        <div className=\"contact-info__paragraph\">\n          <p>Berlin, Germany</p>\n          <p>Bikini Berlin, Scaling Spaces, 2.OG</p>\n          <p>Budapester Str. 46</p>\n          <p>10787 Berlin</p>\n        </div>\n      </div>\n\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/styles.scss\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}